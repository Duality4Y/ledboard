# simul_display
# simulates the ledmatrix
# Author: Jasper Seidel <jawsper@jawsper.nl>
# Date: 2015
# For better comments please look for equivalent code in 
# controller/software/teensy/LedBoard.cpp


import pygame
import select
import socket
import threading

# make pixels bigger for display
DISPLAY_SCALE = 8
X_SIZE = 96
Y_SIZE = 48
RESOLUTION = (X_SIZE, Y_SIZE)
OUTPUT_RESOLUTION = list(map(lambda x: x * DISPLAY_SCALE, RESOLUTION))
BG_COLOR = (0, 0, 0)
FG_COLOR = (255, 0, 0)
PANEL_LAYOUT = (
	(2, 0), (2, 1), (2, 2),
	(1, 2), (1, 1), (1, 0),
	(0, 0), (0, 1), (0, 2),
)


DISPLAY_MEMORY = [0] * (X_SIZE * Y_SIZE)

DISPLAY_MEMORY[50] = 0x7f

TEXT_CHAR_WIDTH = 5
TEXT_CHAR_HEIGHT = 7
TEXT_COLUMNS = 16
TEXT_LINES = 6

#*****************************************************************************
#
# File Name	: 'font5x7.h'
# Title		: Graphic LCD Font (Ascii Charaters)
# Author		: Pascal Stang
# Date			: 10/19/2001
# Revised		: 10/19/2001
# Version		: 0.1
# Target MCU	: Atmel AVR
# Editor Tabs	: 4
#
#*****************************************************************************
# standard ascii 5x7 font
# defines ascii characters 0x20-0x7F (32-127)
Font5x7 = [
	0x00, 0x00, 0x00, 0x00, 0x00,# (space)
	0x00, 0x00, 0x5F, 0x00, 0x00,# !
	0x00, 0x07, 0x00, 0x07, 0x00,# "
	0x14, 0x7F, 0x14, 0x7F, 0x14,# #
	0x24, 0x2A, 0x7F, 0x2A, 0x12,# $
	0x23, 0x13, 0x08, 0x64, 0x62,# %
	0x36, 0x49, 0x55, 0x22, 0x50,# &
	0x00, 0x05, 0x03, 0x00, 0x00,# '
	0x00, 0x1C, 0x22, 0x41, 0x00,# (
	0x00, 0x41, 0x22, 0x1C, 0x00,# )
	0x08, 0x2A, 0x1C, 0x2A, 0x08,# *
	0x08, 0x08, 0x3E, 0x08, 0x08,# +
	0x00, 0x50, 0x30, 0x00, 0x00,# ,
	0x08, 0x08, 0x08, 0x08, 0x08,# -
	0x00, 0x60, 0x60, 0x00, 0x00,# .
	0x20, 0x10, 0x08, 0x04, 0x02,# /
	0x3E, 0x51, 0x49, 0x45, 0x3E,# 0
	0x00, 0x42, 0x7F, 0x40, 0x00,# 1
	0x42, 0x61, 0x51, 0x49, 0x46,# 2
	0x21, 0x41, 0x45, 0x4B, 0x31,# 3
	0x18, 0x14, 0x12, 0x7F, 0x10,# 4
	0x27, 0x45, 0x45, 0x45, 0x39,# 5
	0x3C, 0x4A, 0x49, 0x49, 0x30,# 6
	0x01, 0x71, 0x09, 0x05, 0x03,# 7
	0x36, 0x49, 0x49, 0x49, 0x36,# 8
	0x06, 0x49, 0x49, 0x29, 0x1E,# 9
	0x00, 0x36, 0x36, 0x00, 0x00,# :
	0x00, 0x56, 0x36, 0x00, 0x00,# ;
	0x00, 0x08, 0x14, 0x22, 0x41,# <
	0x14, 0x14, 0x14, 0x14, 0x14,# =
	0x41, 0x22, 0x14, 0x08, 0x00,# >
	0x02, 0x01, 0x51, 0x09, 0x06,# ?
	0x32, 0x49, 0x79, 0x41, 0x3E,# @
	0x7E, 0x11, 0x11, 0x11, 0x7E,# A
	0x7F, 0x49, 0x49, 0x49, 0x36,# B
	0x3E, 0x41, 0x41, 0x41, 0x22,# C
	0x7F, 0x41, 0x41, 0x22, 0x1C,# D
	0x7F, 0x49, 0x49, 0x49, 0x41,# E
	0x7F, 0x09, 0x09, 0x01, 0x01,# F
	0x3E, 0x41, 0x41, 0x51, 0x32,# G
	0x7F, 0x08, 0x08, 0x08, 0x7F,# H
	0x00, 0x41, 0x7F, 0x41, 0x00,# I
	0x20, 0x40, 0x41, 0x3F, 0x01,# J
	0x7F, 0x08, 0x14, 0x22, 0x41,# K
	0x7F, 0x40, 0x40, 0x40, 0x40,# L
	0x7F, 0x02, 0x04, 0x02, 0x7F,# M
	0x7F, 0x04, 0x08, 0x10, 0x7F,# N
	0x3E, 0x41, 0x41, 0x41, 0x3E,# O
	0x7F, 0x09, 0x09, 0x09, 0x06,# P
	0x3E, 0x41, 0x51, 0x21, 0x5E,# Q
	0x7F, 0x09, 0x19, 0x29, 0x46,# R
	0x46, 0x49, 0x49, 0x49, 0x31,# S
	0x01, 0x01, 0x7F, 0x01, 0x01,# T
	0x3F, 0x40, 0x40, 0x40, 0x3F,# U
	0x1F, 0x20, 0x40, 0x20, 0x1F,# V
	0x7F, 0x20, 0x18, 0x20, 0x7F,# W
	0x63, 0x14, 0x08, 0x14, 0x63,# X
	0x03, 0x04, 0x78, 0x04, 0x03,# Y
	0x61, 0x51, 0x49, 0x45, 0x43,# Z
	0x00, 0x00, 0x7F, 0x41, 0x41,# [
	0x02, 0x04, 0x08, 0x10, 0x20,# "\"
	0x41, 0x41, 0x7F, 0x00, 0x00,# ]
	0x04, 0x02, 0x01, 0x02, 0x04,# ^
	0x40, 0x40, 0x40, 0x40, 0x40,# _
	0x00, 0x01, 0x02, 0x04, 0x00,# `
	0x20, 0x54, 0x54, 0x54, 0x78,# a
	0x7F, 0x48, 0x44, 0x44, 0x38,# b
	0x38, 0x44, 0x44, 0x44, 0x20,# c
	0x38, 0x44, 0x44, 0x48, 0x7F,# d
	0x38, 0x54, 0x54, 0x54, 0x18,# e
	0x08, 0x7E, 0x09, 0x01, 0x02,# f
	0x08, 0x14, 0x54, 0x54, 0x3C,# g
	0x7F, 0x08, 0x04, 0x04, 0x78,# h
	0x00, 0x44, 0x7D, 0x40, 0x00,# i
	0x20, 0x40, 0x44, 0x3D, 0x00,# j
	0x00, 0x7F, 0x10, 0x28, 0x44,# k
	0x00, 0x41, 0x7F, 0x40, 0x00,# l
	0x7C, 0x04, 0x18, 0x04, 0x78,# m
	0x7C, 0x08, 0x04, 0x04, 0x78,# n
	0x38, 0x44, 0x44, 0x44, 0x38,# o
	0x7C, 0x14, 0x14, 0x14, 0x08,# p
	0x08, 0x14, 0x14, 0x18, 0x7C,# q
	0x7C, 0x08, 0x04, 0x04, 0x08,# r
	0x48, 0x54, 0x54, 0x54, 0x20,# s
	0x04, 0x3F, 0x44, 0x40, 0x20,# t
	0x3C, 0x40, 0x40, 0x20, 0x7C,# u
	0x1C, 0x20, 0x40, 0x20, 0x1C,# v
	0x3C, 0x40, 0x30, 0x40, 0x3C,# w
	0x44, 0x28, 0x10, 0x28, 0x44,# x
	0x0C, 0x50, 0x50, 0x50, 0x3C,# y
	0x44, 0x64, 0x54, 0x4C, 0x44,# z
	0x00, 0x08, 0x36, 0x41, 0x00,# {
	0x00, 0x00, 0x7F, 0x00, 0x00,# |
	0x00, 0x41, 0x36, 0x08, 0x00,# }
	0x08, 0x08, 0x2A, 0x1C, 0x08,# ->
	0x08, 0x1C, 0x2A, 0x08, 0x08 # <-
]

class Main:
	def start_socket(self):
		self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
		self.sock.bind(('', 1337))

	def process_packet(self, data):
		while len(data) > 0:
			cmd = data[0]
			print('cmd: {:02X}'.format(cmd))
			cmd_funcs = {
				0x01: self.cmd_write_buffer,
				0x02: self.cmd_clear,
				0x10: self.cmd_draw_rows,
				0x11: self.cmd_draw_rect,
				0x20: self.cmd_draw_text_line,
				0x21: self.cmd_draw_text_abs,
			}
			if cmd in cmd_funcs:
				data = cmd_funcs[cmd](data[1:])
			else:
				print('Error: ', cmd)
				break

	def cmd_write_buffer(self, data):
		self.refresh_buffer = True
		return data
	def cmd_clear(self, data):
		for i in range(len(DISPLAY_MEMORY)):
			DISPLAY_MEMORY[i] = 0
		return data
	def cmd_draw_rows(self, data):
		y = data[0]
		image_data = data[1 : 1 + (96 * 8)]
		self.draw_image(0, y * 8, 96, 8, image_data)
		return data[1 + 96 * 8:]
	def cmd_draw_rect(self, data):
		x, y, width, height = data[0:4]
		image_data = data[4 : 4 + width * height]
		self.draw_image(x, y, width, height, image_data)
		return data[4 + (width * height):]

	def cmd_draw_text_line(self, data):
		return self.cmd_draw_text(data, False)
	def cmd_draw_text_abs(self, data):
		return self.cmd_draw_text(data, True)
	def cmd_draw_text(self, data, absolute):
		x_pos, y_pos, brightness = data[0:3]
		if absolute:
			x_pos *= TEXT_CHAR_WIDTH + 1
			y_pos *= TEXT_CHAR_HEIGHT + 1
		text_data = data[3:]
		text_len = -1
		for i in range(len(text_data)):
			if text_data[i] == 0:
				text_len = i
				break
		if text_len >= 0:
			text_data = text_data[:text_len]
			data = data[3 + text_len + 1:]
		else:
			# error
			return []

		try:
			text = text_data.decode('ascii')
		except UnicodeDecodeError:
			# error
			return []

		for i, char in enumerate(text):
			char_pos = ord(char) - 0x20
			if 0 < char_pos > (0x7F - 0x20):
				char_pos = 0
			char_pos *= TEXT_CHAR_WIDTH

			for char_x in range(TEXT_CHAR_WIDTH + 1):
				c = 0 if char_x == TEXT_CHAR_WIDTH else Font5x7[char_pos + char_x]

				for k in range(TEXT_CHAR_HEIGHT):
					on = (c & (1 << k)) != 0
					self.set_pixel(
						brightness if on else 0x00,
						x_pos + char_x + ((TEXT_CHAR_WIDTH + 1) * i),
						y_pos + k
					)
			print(i, char)

		return data

	def draw_image(self, x, y, width, height, image_data):
		pos = 0
		for y_pos in range(height):
			for x_pos in range(width):
				self.set_pixel(image_data[pos], x + x_pos, y + y_pos)
				pos += 1
	def set_pixel(self, val, x, y):
		if 0 < x > X_SIZE or 0 < y > Y_SIZE:
			return
		print('set_pixel({}, {}, {})'.format(val, x, y))
		DISPLAY_MEMORY[y * X_SIZE + x] = val


	def main(self, argv):
		pygame.init()
		screen = pygame.display.set_mode(OUTPUT_RESOLUTION)
		image = pygame.Surface(RESOLUTION)
		clock = pygame.time.Clock()

		self.running = True
		self.refresh_buffer = True
		self.start_socket()
		while self.running:
			r, _, _ = select.select([self.sock], [], [], 0.05)
			if len(r) > 0:
				data, addr = self.sock.recvfrom(1500)
				self.process_packet(data)
			for event in pygame.event.get():
				if event.type == pygame.QUIT:
					self.running = False
				# quit on escape
				elif event.type == pygame.KEYUP and event.key == 27:
					self.running = False
				# print(event)
			if not self.running:
				break

			image.fill(BG_COLOR)

			if self.refresh_buffer:
				self.refresh_buffer = False
				x_pos = y_pos = 0
				for pixel in DISPLAY_MEMORY:
					if pixel > 0:
						color = list(map(lambda x: int(x * (pixel / 256.0)), 
							FG_COLOR))
						image.set_at((x_pos, y_pos), color)
					x_pos += 1
					if x_pos == X_SIZE:
						x_pos = 0
						y_pos += 1
						if y_pos == Y_SIZE:
							break
				# scale image to OUTPUT_RESOLUTION and blit on screen
				pygame.transform.scale(image, OUTPUT_RESOLUTION, screen)
			pygame.display.flip()
			clock.tick(60)

		pygame.quit()
		self.sock.close()
		return 0

if __name__ == '__main__':
	import sys
	sys.exit(Main().main(sys.argv[1:]))